From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Tue, 28 Aug 2018 23:27:23 +0200
Subject: Add site settings option for session-only cookies

---
 .../java/res/xml/website_preferences.xml      |  7 ++++
 .../site_settings/SingleCategorySettings.java | 37 ++++++++++++++++++-
 .../strings/android/site_settings.grdp        |  6 +++
 3 files changed, 49 insertions(+), 1 deletion(-)

diff --git a/components/browser_ui/site_settings/android/java/res/xml/website_preferences.xml b/components/browser_ui/site_settings/android/java/res/xml/website_preferences.xml
--- a/components/browser_ui/site_settings/android/java/res/xml/website_preferences.xml
+++ b/components/browser_ui/site_settings/android/java/res/xml/website_preferences.xml
@@ -40,6 +40,13 @@
         android:title="@string/website_settings_category_notifications_quiet"
         android:defaultValue="false"
         android:persistent="false" />
+    <!-- A toggle for cookies to be saved only until session exit, only shown for the Cookies category. -->
+    <org.chromium.components.browser_ui.settings.ChromeBaseCheckBoxPreference
+        android:key="cookies_session_only"
+        android:title="@string/allow_cookies_session_only_title"
+        android:summary="@string/allow_cookies_session_only_summary"
+        android:defaultValue="true"
+        android:persistent="false" />
     <!-- A toggle for enabling vibration in notifications. -->
     <org.chromium.components.browser_ui.settings.ChromeBaseCheckBoxPreference
         android:key="notifications_vibrate"
diff --git a/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/SingleCategorySettings.java b/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/SingleCategorySettings.java
--- a/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/SingleCategorySettings.java
+++ b/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/SingleCategorySettings.java
@@ -132,6 +132,7 @@ public class SingleCategorySettings extends SiteSettingsPreferenceFragment
 
     // Keys for category-specific preferences (toggle, link, button etc.), dynamically shown.
     public static final String THIRD_PARTY_COOKIES_TOGGLE_KEY = "third_party_cookies";
+    public static final String COOKIES_SESSION_ONLY_TOGGLE_KEY = "cookies_session_only";
     public static final String NOTIFICATIONS_VIBRATE_TOGGLE_KEY = "notifications_vibrate";
     public static final String NOTIFICATIONS_QUIET_UI_TOGGLE_KEY = "notifications_quiet_ui";
     public static final String EXPLAIN_PROTECTED_MEDIA_KEY = "protected_content_learn_more";
@@ -534,6 +535,7 @@ public class SingleCategorySettings extends SiteSettingsPreferenceFragment
 
                 if (type == SiteSettingsCategory.Type.COOKIES) {
                     updateThirdPartyCookiesCheckBox();
+                    updateCookiesSessionOnlyCheckBox();
                 } else if (type == SiteSettingsCategory.Type.NOTIFICATIONS) {
                     updateNotificationsSecondaryControls();
                 }
@@ -550,6 +552,16 @@ public class SingleCategorySettings extends SiteSettingsPreferenceFragment
         } else if (FOUR_STATE_COOKIE_TOGGLE_KEY.equals(preference.getKey())) {
             setCookieSettingsPreference((CookieSettingsState) newValue);
             getInfoForOrigins();
+        } else if (COOKIES_SESSION_ONLY_TOGGLE_KEY.equals(preference.getKey())) {
+            int setting;
+            if (((boolean) newValue)) {
+                setting = ContentSettingValues.SESSION_ONLY;
+            } else {
+                setting = isBlocked() ? ContentSettingValues.BLOCK
+                                      : ContentSettingValues.ALLOW;
+            }
+            WebsitePreferenceBridge.setContentSetting(
+                   browserContextHandle, mCategory.getContentSettingsType(), setting);
         } else if (THIRD_PARTY_COOKIES_TOGGLE_KEY.equals(preference.getKey())) {
             getPrefs().setBlockThirdPartyCookies((boolean) newValue);
         } else if (NOTIFICATIONS_VIBRATE_TOGGLE_KEY.equals(preference.getKey())) {
@@ -675,6 +687,11 @@ public class SingleCategorySettings extends SiteSettingsPreferenceFragment
         if (mCategory.showSites(SiteSettingsCategory.Type.COOKIES) && mRequiresFourStateSetting) {
             setting = cookieSettingsExceptionShouldBlock() ? ContentSettingValues.BLOCK
                                                            : ContentSettingValues.ALLOW;
+            ChromeBaseCheckBoxPreference cookiesSessionOnlyPref = (ChromeBaseCheckBoxPreference)
+                getPreferenceScreen().findPreference(COOKIES_SESSION_ONLY_TOGGLE_KEY);
+            if (cookiesSessionOnlyPref.isChecked() && (setting == ContentSettingValues.ALLOW)) {
+               setting = ContentSettingValues.SESSION_ONLY;
+            }
         } else {
             setting = (WebsitePreferenceBridge.isCategoryEnabled(
                               browserContextHandle, mCategory.getContentSettingsType()))
@@ -934,6 +951,8 @@ public class SingleCategorySettings extends SiteSettingsPreferenceFragment
                 (FourStateCookieSettingsPreference) screen.findPreference(
                         FOUR_STATE_COOKIE_TOGGLE_KEY);
         Preference thirdPartyCookies = screen.findPreference(THIRD_PARTY_COOKIES_TOGGLE_KEY);
+        Preference cookiesSessionOnly = getPreferenceScreen().findPreference(
+                COOKIES_SESSION_ONLY_TOGGLE_KEY);
         Preference notificationsVibrate = screen.findPreference(NOTIFICATIONS_VIBRATE_TOGGLE_KEY);
         Preference notificationsQuietUi = screen.findPreference(NOTIFICATIONS_QUIET_UI_TOGGLE_KEY);
         Preference explainProtectedMediaKey = screen.findPreference(EXPLAIN_PROTECTED_MEDIA_KEY);
@@ -976,6 +995,7 @@ public class SingleCategorySettings extends SiteSettingsPreferenceFragment
 
         if (hideSecondaryToggles) {
             screen.removePreference(thirdPartyCookies);
+            screen.removePreference(cookiesSessionOnly);
             screen.removePreference(notificationsVibrate);
             screen.removePreference(notificationsQuietUi);
             screen.removePreference(explainProtectedMediaKey);
@@ -987,12 +1007,15 @@ public class SingleCategorySettings extends SiteSettingsPreferenceFragment
             return;
         }
 
-        // Configure/hide the third-party cookies toggle, as needed.
+        // Configure/hide the third-party cookies toggle and session-only cookie toggle, as needed.
         if (mCategory.showSites(SiteSettingsCategory.Type.COOKIES) && !mRequiresFourStateSetting) {
             thirdPartyCookies.setOnPreferenceChangeListener(this);
             updateThirdPartyCookiesCheckBox();
+            cookiesSessionOnly.setOnPreferenceChangeListener(this);
+            updateCookiesSessionOnlyCheckBox();
         } else {
             screen.removePreference(thirdPartyCookies);
+            screen.removePreference(cookiesSessionOnly);
         }
 
         // Configure/hide the notifications secondary controls, as needed.
@@ -1121,6 +1144,18 @@ public class SingleCategorySettings extends SiteSettingsPreferenceFragment
         }
     }
 
+    private void updateCookiesSessionOnlyCheckBox() {
+        BrowserContextHandle browserContextHandle =
+                getSiteSettingsClient().getBrowserContextHandle();
+        ChromeBaseCheckBoxPreference cookiesSessionOnlyPref = (ChromeBaseCheckBoxPreference)
+                getPreferenceScreen().findPreference(COOKIES_SESSION_ONLY_TOGGLE_KEY);
+        cookiesSessionOnlyPref.setChecked(
+                WebsitePreferenceBridge.getContentSetting(
+                        browserContextHandle, mCategory.getContentSettingsType()) == ContentSettingValues.SESSION_ONLY);
+        cookiesSessionOnlyPref.setEnabled(WebsitePreferenceBridge.isCategoryEnabled(browserContextHandle,
+                ContentSettingsType.COOKIES));
+    }
+
     private void updateThirdPartyCookiesCheckBox() {
         ChromeBaseCheckBoxPreference thirdPartyCookiesPref =
                 (ChromeBaseCheckBoxPreference) getPreferenceScreen().findPreference(
diff --git a/components/browser_ui/strings/android/site_settings.grdp b/components/browser_ui/strings/android/site_settings.grdp
--- a/components/browser_ui/strings/android/site_settings.grdp
+++ b/components/browser_ui/strings/android/site_settings.grdp
@@ -27,6 +27,12 @@
   <message name="IDS_WEBSITE_SETTINGS_USE_CAMERA" desc="The category filter 'Camera' for site settings.">
     Camera
   </message>
+  <message name="IDS_ALLOW_COOKIES_SESSION_ONLY_TITLE" desc="Title for Allow Cookies Session Only preference">
+    Keep cookies only until you quit your browser
+  </message>
+  <message name="IDS_ALLOW_COOKIES_SESSION_ONLY_SUMMARY" desc="Summary text for Allow Session Only Cookies preference">
+    When enabled, all cookies will be erased when the browsing session is over
+  </message>
   <message name="IDS_CLIPBOARD_PERMISSION_TITLE" desc="Title of the permission to read from clipboard [CHAR-LIMIT=32]">
     Clipboard
   </message>
-- 
2.17.1

